import { NodePgDatabase } from 'drizzle-orm/node-postgres';
import { ApiKeyService } from './api-key.service';
export declare class MusicService {
    private db;
    private readonly apiKeyService;
    constructor(db: NodePgDatabase<any>, apiKeyService: ApiKeyService);
    validateApiKey(apiKey: string): Promise<any>;
    findById(musicId: number): Promise<{
        id: number;
        file_path: string;
        title: string;
        artist: string;
        composer: string | null;
        music_arranger: string | null;
        lyricist: string | null;
        lyrics_text: string | null;
        lyrics_file_path: string | null;
        inst: boolean;
        isrc: string | null;
        duration_sec: number | null;
        release_date: string | null;
        cover_image_url: string | null;
        lyrics_download_count: number | null;
        price_per_play: string | null;
        lyrics_price: string | null;
        created_at: Date | null;
        updated_at: Date | null;
        category_id: number | null;
        grade: number;
        total_valid_play_count: number | null;
        total_play_count: number | null;
        total_rewarded_amount: string | null;
        total_revenue: string | null;
        file_size_bytes: number | null;
        last_played_at: Date | null;
    }>;
    findRewardById(musicId: number): Promise<{
        id: number;
        music_id: number;
        year_month: string;
        total_reward_count: number;
        remaining_reward_count: number;
        reward_per_play: string;
        is_auto_reset: boolean | null;
        created_at: Date | null;
        updated_at: Date | null;
    }>;
    checkPlayPermission(company: any, music: any): Promise<boolean>;
    checkLyricPermission(company: any, music: any): Promise<boolean>;
    startPlay(sessionData: {
        musicId: number;
        companyId: number;
        useCase: any;
        rewardCode: any;
        rewardAmount: string;
        usePrice: any;
    }): Promise<{
        id: number;
        created_at: Date | null;
        updated_at: Date | null;
        music_id: number;
        using_company_id: number;
        reward_amount: string | null;
        transaction_hash: string | null;
        reward_code: "0" | "1" | "2" | "3";
        use_case: "0" | "1" | "2";
        use_price: string | null;
        is_valid_play: boolean | null;
        play_duration_sec: number | null;
    }>;
    recordLyricDownload(downloadData: {
        musicId: number;
        companyId: number;
        userAgent: string;
        downloadTime: Date;
    }): Promise<void>;
    private updateEndMusicStats;
    updateInitMusicStats(musicId: any): Promise<void>;
    lyricUseStat(musicId: any): Promise<void>;
    private processReward;
    private checkAndProcessReward;
    private getCompanyMonthlyRewardCount;
    private getGradeLevel;
    getRewardCode(musicId: number, companyId: number): Promise<'0' | '1' | '2' | '3'>;
    findActiveSession(musicId: number, companyId: number): Promise<{
        id: number;
        music_id: number;
        using_company_id: number;
        reward_amount: string | null;
        created_at: Date | null;
        updated_at: Date | null;
        transaction_hash: string | null;
        reward_code: "0" | "1" | "2" | "3";
        use_case: "0" | "1" | "2";
        use_price: string | null;
        is_valid_play: boolean | null;
        play_duration_sec: number | null;
    }>;
    updatePlayProgress(sessionId: number, progressPercent: number, byteStart: number, byteEnd: number): Promise<void>;
    private checkValidPlayWithTimeCondition;
    private updateTotalTransferredBytes;
    private checkAndMarkValidPlayByTransfer;
    private markAsValidPlayByTransfer;
    markAsValidPlay(sessionId: number): Promise<void>;
    recordValidPlayOnce(opts: {
        musicId: number;
        companyId: number;
        useCase: '0' | '1' | '2';
        rewardCode: any;
        musicPlayId: any;
        rewardAmount: any;
    }): Promise<void>;
    getStartPlay(musicPlayId: any): Promise<{
        id: number;
        music_id: number;
        using_company_id: number;
        reward_amount: string | null;
        created_at: Date | null;
        updated_at: Date | null;
        transaction_hash: string | null;
        reward_code: "0" | "1" | "2" | "3";
        use_case: "0" | "1" | "2";
        use_price: string | null;
        is_valid_play: boolean | null;
        play_duration_sec: number | null;
    }>;
    findCompanyById(companyId: number): Promise<{
        id: number;
        name: string;
        business_number: string;
        email: string;
        password_hash: string;
        phone: string | null;
        grade: "free" | "standard" | "business";
        ceo_name: string | null;
        profile_image_url: string | null;
        homepage_url: string | null;
        smart_account_address: string | null;
        api_key_hash: string | null;
        total_rewards_earned: string | null;
        total_rewards_used: string | null;
        created_at: Date | null;
        updated_at: Date | null;
    }>;
}
